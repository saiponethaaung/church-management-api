// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id String @id @default(uuid(7))

  name     String
  email    String @unique
  password String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  createdBy String @map("created_by")
  updatedBy String @map("updated_by")

  @@map("admin")
}

model User {
  id String @id @default(uuid(7))

  name     String
  email    String
  password String
  verified Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  createdBy String? @map("created_by")
  updatedBy String? @map("updated_by")

  userVerification      UserVerification[]
  churches              Church[]
  churchMembers         ChurchMember[]     @relation(name: "church_member_key")
  churchMemberCreatedBy ChurchMember[]
  createdPrograms       Program[]          @relation(name: "program_created_by")
  updatedPrograms       Program[]          @relation(name: "program_updated_by")
  createdProgramTypes   ProgramType[]      @relation(name: "program_type_created_by")
  updatedProgramTypes   ProgramType[]      @relation(name: "program_type_updated_by")
  createdAnnouncements  Announcement[]     @relation(name: "announcement_created_by")
  updatedAnnouncements  Announcement[]     @relation(name: "announcement_updated_by")
  createdDonationTypes  DonationType[]     @relation(name: "donation_type_created_by")
  updatedDonationTypes  DonationType[]     @relation(name: "donation_type_updated_by")
  createdDonations      Donation[]         @relation(name: "donation_created_by")
  updatedDonations      Donation[]         @relation(name: "donation_updated_by")

  @@map("user")
}

model UserVerification {
  id String @id @default(uuid(7))

  userId String
  user   User   @relation(fields: [userId], references: [id])

  code   String
  status Boolean @default(true)

  activatedAt DateTime? @default(now()) @map("activated_at")
  expiredAt   DateTime  @default(now()) @map("expired_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([code, userId])
  @@map("user_verification")
}

model Country {
  id     String   @id @default(uuid(7))
  church Church[]

  @@map("country")
}

model Church {
  id String @id @default(uuid(7))

  name     String
  logo     String?
  verified Boolean @default(false)
  address  Json?

  countryId String

  createdBy String @map("created_by")
  updatedBy String @map("updated_by")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  createdByUser User           @relation(fields: [createdBy], references: [id])
  country       Country        @relation(fields: [countryId], references: [id])
  churchMembers ChurchMember[]
  programs      Program[]
  programTypes  ProgramType[]
  announcements Announcement[]
  DonationType  DonationType[]

  @@map("church")
}

model ChurchInfo {
  id String @id @default(uuid(7))

  chruchId String

  createdBy String @map("created_by")
  updatedBy String @map("updated_by")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("church_info")
}

model ChurchMember {
  id String @id @default(uuid(7))

  name    String
  image   String?
  email   String?
  phone   String?
  dob     String?
  address Json?

  churchId String @map("church_id")
  church   Church @relation(fields: [churchId], references: [id])

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], name: "church_member_key")

  createdBy String @map("created_by")
  updatedBy String @map("updated_by")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  createdByUser User?      @relation(fields: [createdBy], references: [id])
  donations     Donation[]

  @@map("church_member")
}

model ProgramType {
  id String @id @default(uuid(7))

  name        String
  description String
  status      Boolean @default(true)
  isGlobal    Boolean @default(false)

  churchId String? @map("church_id")
  chruch   Church? @relation(fields: [churchId], references: [id])

  createdBy     String @map("created_by")
  createdByUser User   @relation(fields: [createdBy], references: [id], name: "program_type_created_by")
  updatedBy     String @map("updated_by")
  updatedByUser User   @relation(fields: [updatedBy], references: [id], name: "program_type_updated_by")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  programs  Program[]

  @@map("program_type")
}

model Program {
  id String @id @default(uuid(7))

  name          String
  description   String?
  isFeatured    Boolean     @default(false)
  status        Boolean     @default(true)
  startDate     DateTime?
  endDate       DateTime?
  // requiredRegistration Boolean @default()
  programTypeId String      @map("program_type_id")
  programType   ProgramType @relation(fields: [programTypeId], references: [id])

  churchId String @map("church_id")
  church   Church @relation(fields: [churchId], references: [id])

  createdBy     String @map("created_by")
  createdByUser User   @relation(fields: [createdBy], references: [id], name: "program_created_by")
  updatedBy     String @map("updated_by")
  updatedByUser User   @relation(fields: [updatedBy], references: [id], name: "program_updated_by")

  createdAt            DateTime       @default(now()) @map("created_at")
  updatedAt            DateTime       @default(now()) @map("updated_at")
  userId               String?
  programAnnouncements Announcement[]

  @@map("program")
}

model Announcement {
  id String @id @default(uuid(7))

  name    String
  message String

  churchId String @map("church_id")
  church   Church @relation(fields: [churchId], references: [id])

  programId String  @map("program_id")
  program   Program @relation(fields: [programId], references: [id])

  createdBy     String @map("created_by")
  createdByUser User   @relation(fields: [createdBy], references: [id], name: "announcement_created_by")
  updatedBy     String @map("updated_by")
  updatedByUser User   @relation(fields: [updatedBy], references: [id], name: "announcement_updated_by")

  @@map("announcement")
}

model DonationType {
  id String @id @default(uuid(7))

  name        String
  description String
  status      Boolean @default(true)
  isGlobal    Boolean @default(false)

  churchId String? @map("church_id")
  chruch   Church? @relation(fields: [churchId], references: [id])

  createdBy     String @map("created_by")
  createdByUser User   @relation(fields: [createdBy], references: [id], name: "donation_type_created_by")
  updatedBy     String @map("updated_by")
  updatedByUser User   @relation(fields: [updatedBy], references: [id], name: "donation_type_updated_by")

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")
  donations Donation[]

  @@map("donation_type")
}

model Donation {
  id String @id @default(uuid(7))

  amount Int

  memberId String?
  member   ChurchMember @relation(fields: [churchMemberId], references: [id])

  donationTypeId String
  donationType   DonationType @relation(fields: [donationTypeId], references: [id])

  createdBy     String @map("created_by")
  createdByUser User   @relation(fields: [createdBy], references: [id], name: "donation_created_by")
  updatedBy     String @map("updated_by")
  updatedByUser User   @relation(fields: [updatedBy], references: [id], name: "donation_updated_by")

  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  churchMemberId String

  @@map("donation")
}
